#!/usr/bin/env bash

watch_file flake.nix
watch_file flake.lock
use flake

set -euo pipefail

is_admin () {
  vault token lookup -format json \
    | jq -e -r '.data.policies | any(. == "admin")' \
    &> /dev/null
}

github_token ()  {
  awk '/github.com/ { print $6; exit }' ~/.netrc
}

cache="${XDG_CACHE_HOME:-.direnv}/bitte/$BITTE_CLUSTER/tokens"

mkdir -p "$cache"
vault_file="$cache/vault.token"
consul_file="$cache/consul.token"
nomad_file="$cache/nomad.token"

# Vault

if [ -s "$vault_file" ]; then
  VAULT_TOKEN="$(< "$vault_file")"
  export VAULT_TOKEN
fi

if ! vault token lookup &> /dev/null; then
  echo "Obtaining and caching Vault token"
  VAULT_TOKEN="$(
    github_token | \
      vault login -no-store -token-only -method=github -path github-employees token=-
  )"
  export VAULT_TOKEN
fi

vault print token \
  > "$vault_file"

if is_admin; then
  ROLE="admin"
else
  ROLE="developer"
fi

# Nomad

if [ -s "$nomad_file" ]; then
  NOMAD_TOKEN="$(< "$nomad_file")"
  export NOMAD_TOKEN
fi

if ! nomad acl token self &> /dev/null; then
  echo "Obtaining and caching Nomad token for $ROLE"
  NOMAD_TOKEN="$(vault read -field secret_id nomad/creds/${ROLE})"
  export NOMAD_TOKEN
fi

nomad acl token self \
  | awk '/Secret ID/ { print $4 }' \
  > "$nomad_file"

# Consul

if [ -s "$consul_file" ]; then
  CONSUL_HTTP_TOKEN="$(< "$consul_file")"
  export CONSUL_HTTP_TOKEN
fi

if ! consul acl token read -self &> /dev/null; then
  echo "Obtaining and caching Consul token for $ROLE"
  CONSUL_HTTP_TOKEN="$(vault read -field token consul/creds/${ROLE})"
  export CONSUL_HTTP_TOKEN
fi

consul acl token read -self -format json \
  | jq -r -e .SecretID \
  > "$consul_file"
